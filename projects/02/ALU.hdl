// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Zero the x input if zx==1
    Not(in=zx, out=zx1);
    And16(a=x, 
          b[0]=zx1, b[1]=zx1, b[2]=zx1, b[3]=zx1, 
          b[4]=zx1, b[5]=zx1, b[6]=zx1, b[7]=zx1, 
          b[8]=zx1, b[9]=zx1, b[10]=zx1, b[11]=zx1, 
          b[12]=zx1, b[13]=zx1, b[14]=zx1, b[15]=zx1, 
          out=x1);


    // Negate the x input if nx==1
    Xor16(a=x1, 
          b[0]=nx, b[1]=nx, b[2]=nx, b[3]=nx, 
          b[4]=nx, b[5]=nx, b[6]=nx, b[7]=nx, 
          b[8]=nx, b[9]=nx, b[10]=nx, b[11]=nx, 
          b[12]=nx, b[13]=nx, b[14]=nx, b[15]=nx, 
          out=x2);

    // Zero the y input if zy==1
    Not(in=zy, out=zy1);
    And16(a=y, 
          b[0]=zy1, b[1]=zy1, b[2]=zy1, b[3]=zy1, 
          b[4]=zy1, b[5]=zy1, b[6]=zy1, b[7]=zy1, 
          b[8]=zy1, b[9]=zy1, b[10]=zy1, b[11]=zy1, 
          b[12]=zy1, b[13]=zy1, b[14]=zy1, b[15]=zy1, 
          out=y1);

    // Negate the y input if ny==1
    Xor16(a=y1, 
          b[0]=ny, b[1]=ny, b[2]=ny, b[3]=ny, 
          b[4]=ny, b[5]=ny, b[6]=ny, b[7]=ny, 
          b[8]=ny, b[9]=ny, b[10]=ny, b[11]=ny, 
          b[12]=ny, b[13]=ny, b[14]=ny, b[15]=ny, 
          out=y2);


    // Compute the f: Do (a+b)*f + (a&b)*(~f)
    Add16(a=x2, b=y2, out=added);
    And16(a=x2, b=y2, out=anded);

    Not16(in[0]=f, in[1]=f, in[2]=f, in[3]=f, 
          in[4]=f, in[5]=f, in[6]=f, in[7]=f, 
          in[8]=f, in[9]=f, in[10]=f, in[11]=f, 
          in[12]=f, in[13]=f, in[14]=f, in[15]=f, 
          out=notf);

    And16(a=added,
          b[0]=f, b[1]=f, b[2]=f, b[3]=f, 
          b[4]=f, b[5]=f, b[6]=f, b[7]=f, 
          b[8]=f, b[9]=f, b[10]=f, b[11]=f, 
          b[12]=f, b[13]=f, b[14]=f, b[15]=f, 
          out=added1);
    And16(a=anded,b=notf, out=anded1);

    Or16(a=anded1, b=added1, out=out1);


    // Negate the output if no==1
    Xor16(a=out1, 
          b[0]=no, b[1]=no, b[2]=no, b[3]=no, 
          b[4]=no, b[5]=no, b[6]=no, b[7]=no, 
          b[8]=no, b[9]=no, b[10]=no, b[11]=no, 
          b[12]=no, b[13]=no, b[14]=no, b[15]=no, 
          out=out2);

    And16(a=true, b=out2, out=out);


    // Set the ng output
    And16(a[0..14]=false, a[15]=true, b=out2, out=totalng);
    Any16(in=totalng, out=ng);

    // Set the zr output
    Any16(in=out2, out=notzr);
    Not(in=notzr, out=zr);
}
